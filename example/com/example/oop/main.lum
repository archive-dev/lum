package com.example.oop

## Basic class
class Vehicle {
    public var make: String
    protected var modelYear: Int
    private var speed: Int = 0

    ## Constructor
    ## constructorDeclaration: ... 'init' ... '(' parameterList? ')' block
    public init(makeName: String, year: Int) {
        this.make = makeName      ## Assuming 'this' is available or implicit
        this.modelYear = year
    }

    public func accelerate(amount: Int) {
        this.speed = this.speed + amount
    }

    public func getSpeed(): Int {
        return this.speed
    }

    public func getDescription(): String {
        return "Make: " + this.make + ", Year: " + this.modelYear + ", Speed: " + this.speed
    }
}

## Inheritance
## inheritance: '(' inheritanceSpec (',' inheritanceSpec)* ')';
## inheritanceSpec: first=type | 'extends' '=' extends=type | ...
class Car (extends = Vehicle) {
    public var numDoors: Int

    public init(makeName: String, year: Int, doors: Int) {
        ## superCall: 'super' '.' NEW '(' argumentList? ')';
        ## Assuming NEW is the 'new' keyword, so super.new()
        super.new(makeName, year) ## Call to base class constructor
        this.numDoors = doors
    }

    ## Override method (assuming override is implicit by signature match)
    public func getDescription(): String {
        var baseDesc: String = super.getDescription() ## Assuming super.methodCall() syntax
                                                    ## Grammar: expression '.' (functionCall | IDENTIFIER)
                                                    ## 'super' is a primary expression. So `super.getDescription()` should work.
        return baseDesc + ", Doors: " + this.numDoors
    }

    public func getModelYearInsideClass(): Int {
        return this.modelYear ## Accessing protected member from base class
    }
}

## Class with static members and custom getters/setters
## modifier: (static='static' | abstract='abstract') (final='final')?;
class AppConfig {
    public static final AppName: String = "Lum OOP Demo"
    private static var _logLevel: Int = 1 ## Default log level

    ## Variable with custom getter/setter
    ## variableDeclaration: IDENTIFIER (':' type)? ... (getterDeclaration | setterDeclaration)* ;
    ## getterDeclaration: access? 'get' block?;
    ## setterDeclaration: access? 'set' ( '(' parameter ')' block)?;
    public static var logLevel: Int {
        public get { return _logLevel }
        public set(level: Int) {
            if level >= 0 && level <= 5 {
                _logLevel = level
            }
        }
    }

    public static func getFormattedLogLevel(): String {
        return "Current Log Level: " + _logLevel
    }
}

func demonstrateClasses(): String {
    var myVehicle = new Vehicle("Generic Motors", 2023)
    myVehicle.accelerate(50)
    var vehicleDesc: String = myVehicle.getDescription() ## "Make: Generic Motors, Year: 2023, Speed: 50"

    var myCar = new Car("LumAuto", 2024, 4)
    myCar.accelerate(80)
    var carDesc: String = myCar.getDescription() ## "Make: LumAuto, Year: 2024, Speed: 80, Doors: 4"
    var carModelYear: Int = myCar.getModelYearInsideClass() ## 2024

    var appName: String = AppConfig.AppName
    AppConfig.logLevel = 3 ## Use static setter
    var currentLogLevel: Int = AppConfig.logLevel ## Use static getter
    var formattedLogLevel: String = AppConfig.getFormattedLogLevel() ## "Current Log Level: 3"

    return "Vehicle: " + vehicleDesc + "\n" +
           "Car: " + carDesc + " (Model Year: " + carModelYear + ")\n" +
           "App Name: " + appName + "\n" +
           "Formatted Log Level: " + formattedLogLevel + " (Raw: " + currentLogLevel + ")"
}

func mainOOP(): String {
    return demonstrateClasses()
}
