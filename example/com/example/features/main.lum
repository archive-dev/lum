package com.example.features

## Interface Declaration
## interfaceDeclaration: ... 'interface' IDENTIFIER inheritance? genericDeclaration? block?
## block can contain functionSignatures
interface Serializable {
    func serialize(): String ## A function signature
}

interface Drawable {
    func draw(): String
    func setColor(colorName: String) ## Another signature
}

## Class implementing multiple interfaces
## inheritanceSpec: ... | 'implements' '=' '[' type (',' type)* ']'
class Button (implements = [Serializable, Drawable]) {
    public var label: String
    private var color: String = "gray"

    public init(lbl: String) {
        this.label = lbl
    }

    public func serialize(): String {
        return "{ type: 'Button', label: '" + this.label + "', color: '" + this.color + "' }"
    }

    public func draw(): String {
        return "Drawing a " + this.color + " button labeled '" + this.label + "'"
    }

    public func setColor(colorName: String) {
        this.color = colorName
    }
}

## Enum Declaration
## enumDeclaration: ... 'enum' IDENTIFIER ... block?
## Grammar doesn't specify enum body structure; assuming simple named constants.
enum LogLevel {
    DEBUG, INFO, WARNING, ERROR
}

enum FileAccessMode {
    READ, WRITE, APPEND
}

func getLogLevelName(level: LogLevel): String {
    ## Assuming enums can be compared or used in switch
    ## For simplicity, direct string conversion or if/else
    if level == LogLevel.DEBUG { return "DEBUG" }
    if level == LogLevel.INFO { return "INFO" }
    ## ... and so on. A switch would be better if supported for enums.
    ## switch level { case LogLevel.DEBUG: return "DEBUG"; ... }
    return "UNKNOWN_LOG_LEVEL" ## Fallback
}

## Annotation Declaration
## annotationDeclaration: ... 'annotation' IDENTIFIER ('(' parameterList? ')')? block?
annotation Todo(description: String)
annotation ExperimentalFeature(releaseTarget: String = "next_version")
annotation InternalApi

## Using Annotations
## annotation: '@' IDENTIFIER ('(' (annotationArgs | expression) ')')?;
@Todo(description = "Refactor this method for better performance")
@InternalApi
func legacyDataProcessing(data: String): String {
    ## Annotations are metadata; they don't alter runtime behavior directly here.
    return "Processed (legacy): " + data
}

@ExperimentalFeature(releaseTarget = "v2.1")
class AdvancedWidget {
    @Todo(description = "Add more properties")
    public var name: String

    public init(n: String) { this.name = n }

    public func display(): String {
        return "Displaying AdvancedWidget: " + this.name
    }
}

func mainFeaturesDemo(): String {
    var myButton = new Button("Submit")
    myButton.setColor("blue")
    var drawResult: String = myButton.draw() ## "Drawing a blue button labeled 'Submit'"
    var serializeResult: String = myButton.serialize()

    var currentLevel: LogLevel = LogLevel.INFO
    var levelName: String = getLogLevelName(currentLevel) ## "INFO" (if fully implemented)

    var processedData: String = legacyDataProcessing("sample")
    
    var widget = new AdvancedWidget("SuperSlider")
    var widgetDisplay: String = widget.display()

    return "Button Draw: " + drawResult + "\n" +
           "Button Serialize: " + serializeResult + "\n" +
           "Log Level: " + levelName + "\n" +
           "Legacy Data: " + processedData + "\n" +
           "Widget Display: " + widgetDisplay
}
