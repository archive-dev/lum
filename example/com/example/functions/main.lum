package com.example.functions

## Function with parameters and return type
func multiply(a: Int, b: Int): Int {
    return a * b
}

## Function with no parameters, returning a value
func getAppName(): String {
    return "LumLang Demo App"
}

## Function with parameters, no explicit return type (procedure-like)
## The grammar allows block? so a function can just declare if it's a signature.
## For a concrete function, a block is expected. If no return type, it's implicitly void/unit.
func logMessage(message: String) {
    ## In a real scenario, this might print to console or a log file.
    ## For testing return values, this type of function is less direct.
    ## We can assume it performs an action.
    var internalLog = "LOG: " + message ## Simulate internal action
}

## Lambda expression examples
## lambda: ((parameterList) | '(' parameterList ')') block
## block: ('{' statement* '}') | '=>' statement
func demonstrateLambdas(): String {
    var addLambda = (x: Int, y: Int): Int => x + y
    var result1: Int = addLambda(10, 5) ## 15

    var squareLambda = (n: Int): Int => {
        var sq: Int = n * n
        return sq
    }
    var result2: Int = squareLambda(4) ## 16

    ## Lambda with type inference for parameters (if supported by language, grammar allows no type in param list)
    ## parameter: IDENTIFIER ':' type ('=' expression)?;
    ## The grammar requires type for parameters. So, no type inference for lambda params here.

    return "Add Lambda (10,5): " + result1 + " | Square Lambda (4): " + result2
}

## Higher-order function: takes a function (lambda) as an argument
func compute(a: Int, b: Int, operation: (Int, Int): Int): Int {
    return operation(a, b)
}

func demonstrateHigherOrderFunction(): Int {
    var sum: Int = compute(20, 30, (x: Int, y: Int): Int => x + y) ## 50

    var multiplyLambda = (x: Int, y: Int): Int => x * y
    var product: Int = compute(20, 30, multiplyLambda) ## 600

    return sum + product ## 650
}

## Recursive function example
func factorial(n: Int): Int {
    if n <= 0 {
        return 1
    } else {
        return n * factorial(n - 1)
    }
}

func demonstrateRecursion(): Int {
    return factorial(5) ## 120
}

func mainFunctionsLambdas(): String {
    var prod = multiply(7, 6)
    var appName = getAppName()
    logMessage("Testing log function") ## Call procedure

    var lambdaResults = demonstrateLambdas()
    var hofResult = demonstrateHigherOrderFunction()
    var factResult = demonstrateRecursion()

    return "Multiply(7,6): " + prod + "\n" +
           "AppName: " + appName + "\n" +
           "Lambda Demo: " + lambdaResults + "\n" +
           "Higher-Order Func Result: " + hofResult + "\n" +
           "Factorial(5): " + factResult
}
