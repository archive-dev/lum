package com.example.operators

class ComplexNumber {
    public var real: Float
    public var imag: Float

    public init(r: Float, i: Float) {
        this.real = r
        this.imag = i
    }

    ## Operator Overloading
    ## operatorDeclaration: ... 'operator' operator ... '(' parameterList? ')' ... block
    ## operator: binaryOperator | unaryOperator | '[]';

    ## Overload '+' binary operator
    public operator +(other: ComplexNumber): ComplexNumber {
        return new ComplexNumber(this.real + other.real, this.imag + other.imag)
    }

    ## Overload '*' binary operator (complex multiplication)
    public operator *(other: ComplexNumber): ComplexNumber {
        var r_part: Float = this.real * other.real - this.imag * other.imag
        var i_part: Float = this.real * other.imag + this.imag * other.real
        return new ComplexNumber(r_part, i_part)
    }
    
    ## Overload '==' binary operator for equality
    public operator ==(other: ComplexNumber): Bool {
        return this.real == other.real && this.imag == other.imag
    }

    ## Overload '[]' operator for component access (0 for real, 1 for imaginary)
    ## operator: ... | '[]' # ArrayAccessOp
    public operator [](index: Int): Float {
        if index == 0 {
            return this.real
        } elif index == 1 {
            return this.imag
        } else {
            ## Error handling: Lum might require throwing an exception or returning a specific error value.
            ## For simplicity, returning 0.0 or NaN. Let's use 0.0.
            ## A production language would have a robust error mechanism.
            return 0.0 ## Or throw Error("Index out of bounds")
        }
    }
    
    ## Note: Unary operator overloading for '-' (negation) is tricky.
    ## The grammar's `preUnaryOperator` only explicitly lists `++`, `--`, `!`, `not`.
    ## If `-` is not considered a preUnaryOperator token, `operator -()` cannot be defined.
    ## A named method like `negate()` would be an alternative.
    public func negate(): ComplexNumber {
        return new ComplexNumber(-this.real, -this.imag) ## Using built-in negation for Floats
    }

    public func toString(): String { ## Helper for display
        if this.imag >= 0 {
            return "" + this.real + " + " + this.imag + "i"
        } else {
            return "" + this.real + " - " + (-this.imag) + "i"
        }
    }
}

func demonstrateOperatorOverloading(): String {
    var c1 = new ComplexNumber(2.0, 3.0)  ## 2 + 3i
    var c2 = new ComplexNumber(1.0, -1.0) ## 1 - 1i

    ## Test '+' operator
    var sum: ComplexNumber = c1 + c2 ## (2+1) + (3-1)i = 3 + 2i
    var sumStr: String = sum.toString()

    ## Test '*' operator
    var product: ComplexNumber = c1 * c2 ## (2*1 - 3*(-1)) + (2*(-1) + 3*1)i = (2+3) + (-2+3)i = 5 + 1i
    var prodStr: String = product.toString()

    ## Test '==' operator
    var c3 = new ComplexNumber(2.0, 3.0)
    var areEqual_c1_c2: Bool = (c1 == c2) ## false
    var areEqual_c1_c3: Bool = (c1 == c3) ## true

    ## Test '[]' operator
    var c1_real: Float = c1[0] ## 2.0
    var c1_imag: Float = c1[1] ## 3.0
    var c1_invalid: Float = c1[2] ## 0.0 (error case)

    ## Test negate method
    var c1_neg: ComplexNumber = c1.negate() ## -2 - 3i
    var negStr: String = c1_neg.toString()

    return "Sum (c1+c2): " + sumStr + "\n" +
           "Product (c1*c2): " + prodStr + "\n" +
           "c1 == c2: " + areEqual_c1_c2 + ", c1 == c3: " + areEqual_c1_c3 + "\n" +
           "c1 Real: " + c1_real + ", c1 Imag: " + c1_imag + ", c1 InvalidIdx: " + c1_invalid + "\n" +
           "Negated c1: " + negStr
}

func mainOperators(): String {
    return demonstrateOperatorOverloading()
}
